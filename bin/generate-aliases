#!/bin/env scala

val infile  = "core/src/main/scala/japgolly/scalacss/Attrs.scala"
val outfile = "core/src/main/scala/japgolly/scalacss/generated.scala"

val r1 = """.*(?: val .*Attr[ \.]| extends ).*""".r.pattern
val r2 = """^\s*(?://|\*).*""".r.pattern
val r3 = """.*(?:override|private| val +values).*""".r.pattern
val r4 = """^.* (?:object|val) +| *=.+| +extends.*""".r
val r5 = """^[a-z].*""".r.pattern

def findMethod(lines: Stream[String]) = lines
    .filter   (r1.matcher(_).matches)
    .filterNot(r2.matcher(_).matches)
    .filterNot(r3.matcher(_).matches)
    .map      (r4.replaceAllIn(_, ""))
    .filter   (r5.matcher(_).matches)

val commentr = """(?s)^(.+\n *\*/) *\n""".r
def comment(d: String): Option[String] =
  commentr.findFirstMatchIn(d).map(_ group 1)

val attrs =
  scala.io.Source.fromFile(infile).mkString
    .split("\n[ \t]*\n+").toStream
    .map(l => comment(l).fold((None: Option[String], l))(c => (Some(c), l.replace(c,""))))
    .flatMap{case (c,l) => findMethod(l.split("\n").toStream).headOption.map((c,_)).toStream }
    .sortBy(_._2)
    // .map{case (c, a) => (None, a) }
    .map{case (c, a) => c.fold("")(_+"\n") + s"  @inline final def $a = Attrs.$a" }

val attrAliases =
s"""
  |package japgolly.scalacss
  |
  | // Note: This is generated by bin/generate-aliases
  | // It used to be (and should be) part of SBT but that made life in IntelliJ a complete and utter hell.
  |
  |abstract class AttrAliasesAndValueTRules extends ValueT.Rules {
  |${attrs mkString "\n"}
  |}
""".stripMargin

import java.nio.file._
val bytes = attrAliases.getBytes("UTF-8")
Files.write(Paths.get(outfile), bytes)
